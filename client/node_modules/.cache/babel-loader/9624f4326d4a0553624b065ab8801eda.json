{"ast":null,"code":"import \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nvar _jsxFileName = \"/Users/arjunwang/PlanAhead copy/client/src/secondPage/searchBar.jsx\";\nimport React, { Component } from \"react\";\nimport Droppable from \"../component/droppable\";\nimport Draggable from \"../component/draggable\";\nimport Mod from \"../component/mod\";\nimport storage from \"../component/storage\";\nimport \"../style/searchbar.less\";\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n    const _this$props = this.props,\n          adyear = _this$props.adyear,\n          major = _this$props.major;\n    let searchbar = storage.getYMCol(adyear, major, \"SearchBarContainer\");\n    let exist = [];\n\n    for (let i of searchbar) {\n      exist.push(i);\n    }\n\n    this.state = {\n      inputValue: \"\",\n      draggables: exist,\n      click: 0\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleBtnClick = this.handleBtnClick.bind(this);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"searchbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(_Input, {\n      placeholder: \"Search for a module\",\n      id: \"insertion\",\n      value: this.state.inputValue,\n      onChange: this.handleInputChange,\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), React.createElement(_Button, {\n      onClick: this.handleBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Go\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Droppable, {\n      id: \"SearchBar\",\n      isDroppable: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"SearchBarContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, this.state.draggables.map(mod => React.createElement(Draggable, {\n      className: \"list-inline-item\",\n      parent: \"SearchBarContainer\",\n      id: \"\".concat(mod[0], \"Draggable\"),\n      key: \"\".concat(mod[0], \"Draggable\"),\n      name: mod[2],\n      adyear: this.props.adyear,\n      major: this.props.major,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Mod, {\n      id: mod[0],\n      key: mod[0],\n      code: mod[0],\n      name: mod[2],\n      color: mod[1],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })))))));\n  }\n\n  handleInputChange(e) {\n    const value = e.target.value;\n    this.setState(() => ({\n      inputValue: value\n    }));\n  }\n\n  handleBtnClick() {\n    const inputcode = this.state.inputValue.toUpperCase();\n    let allModules = document.getElementsByTagName(\"button\");\n\n    for (let i = 0; i < allModules.length; i++) {\n      if (allModules[i].getAttribute(\"id\") === inputcode) {\n        alert(\"\".concat(inputcode, \" already exists!\"));\n        this.setState({\n          inputValue: \"\"\n        });\n        return;\n      }\n    }\n\n    fetch(\"../data/modules/MENU/allmods.json\").then(res => res.json()).then(data => {\n      if (inputcode in data) {\n        const _this$props2 = this.props,\n              adyear = _this$props2.adyear,\n              major = _this$props2.major;\n        storage.addNewMod(adyear, major, inputcode);\n        let _this$state = this.state,\n            draggables = _this$state.draggables,\n            click = _this$state.click;\n        click++;\n        draggables.push([inputcode, \"rgb(120,206,179)\", \"additional\"]);\n        this.setState({\n          inputValue: \"\",\n          draggables: draggables,\n          click: click\n        });\n      } else {\n        _message.warning(inputcode + \" is invalid\", 5);\n      }\n    });\n  }\n\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["/Users/arjunwang/PlanAhead copy/client/src/secondPage/searchBar.jsx"],"names":["React","Component","Droppable","Draggable","Mod","storage","SearchBar","constructor","props","adyear","major","searchbar","getYMCol","exist","i","push","state","inputValue","draggables","click","handleInputChange","bind","handleBtnClick","render","map","mod","e","value","target","setState","inputcode","toUpperCase","allModules","document","getElementsByTagName","length","getAttribute","alert","fetch","then","res","json","data","addNewMod","warning"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Droppable from \"../component/droppable\";\r\nimport Draggable from \"../component/draggable\";\r\nimport Mod from \"../component/mod\";\r\nimport { Input, Button, message } from \"antd\";\r\nimport storage from \"../component/storage\";\r\nimport \"../style/searchbar.less\";\r\n\r\nclass SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { adyear, major } = this.props;\r\n    let searchbar = storage.getYMCol(adyear, major, \"SearchBarContainer\");\r\n    let exist = [];\r\n    for (let i of searchbar) {\r\n      exist.push(i);\r\n    }\r\n    this.state = {\r\n      inputValue: \"\",\r\n      draggables: exist,\r\n      click: 0\r\n    };\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleBtnClick = this.handleBtnClick.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"searchbar\">\r\n        <div className=\"input\">\r\n          <Input\r\n            placeholder=\"Search for a module\"\r\n            id=\"insertion\"\r\n            value={this.state.inputValue}\r\n            onChange={this.handleInputChange}\r\n            autoComplete=\"off\"\r\n          />\r\n          <Button onClick={this.handleBtnClick}>Go</Button>\r\n        </div>\r\n        <div>\r\n          <Droppable id=\"SearchBar\" isDroppable={true}>\r\n            <div id=\"SearchBarContainer\">\r\n              {this.state.draggables.map(mod => (\r\n                <Draggable\r\n                  className=\"list-inline-item\"\r\n                  parent=\"SearchBarContainer\"\r\n                  id={`${mod[0]}Draggable`}\r\n                  key={`${mod[0]}Draggable`}\r\n                  name={mod[2]}\r\n                  adyear={this.props.adyear}\r\n                  major={this.props.major}\r\n                >\r\n                  <Mod\r\n                    id={mod[0]}\r\n                    key={mod[0]}\r\n                    code={mod[0]}\r\n                    name={mod[2]}\r\n                    color={mod[1]}\r\n                  />\r\n                </Draggable>\r\n              ))}\r\n            </div>\r\n          </Droppable>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleInputChange(e) {\r\n    const value = e.target.value;\r\n    this.setState(() => ({\r\n      inputValue: value\r\n    }));\r\n  }\r\n\r\n  handleBtnClick() {\r\n    const inputcode = this.state.inputValue.toUpperCase();\r\n    let allModules = document.getElementsByTagName(\"button\");\r\n    for (let i = 0; i < allModules.length; i++) {\r\n      if (allModules[i].getAttribute(\"id\") === inputcode) {\r\n        alert(`${inputcode} already exists!`);\r\n        this.setState({ inputValue: \"\" });\r\n        return;\r\n      }\r\n    }\r\n    fetch(\"../data/modules/MENU/allmods.json\")\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (inputcode in data) {\r\n          const { adyear, major } = this.props;\r\n          storage.addNewMod(adyear, major, inputcode);\r\n          let { draggables, click } = this.state;\r\n          click++;\r\n          draggables.push([inputcode, \"rgb(120,206,179)\", \"additional\"]);\r\n          this.setState({\r\n            inputValue: \"\",\r\n            draggables: draggables,\r\n            click: click\r\n          });\r\n        } else {\r\n          message.warning(inputcode + \" is invalid\", 5);\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n"]},"metadata":{},"sourceType":"module"}