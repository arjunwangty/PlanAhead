{"ast":null,"code":"import \"antd/es/row/style\";\nimport _Row from \"antd/es/row\";\nimport \"antd/es/col/style\";\nimport _Col from \"antd/es/col\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/tooltip/style\";\nimport _Tooltip from \"antd/es/tooltip\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nvar _jsxFileName = \"/Users/arjunwang/PlanAhead copy/client/src/component/Register.jsx\";\nimport React, { Component } from \"react\";\nimport { register } from \"./UserFunctions\";\n\nclass Register extends Component {\n  constructor() {\n    super();\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue(\"password\")) {\n        callback(\"Two passwords that you enter is inconsistent!\");\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields([\"confirm\"], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.state = {\n      confirmDirty: false,\n      errors: {}\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        const newUser = {\n          username: values.username,\n          email: values.email,\n          password: values.password\n        };\n        console.log(newUser);\n        register(newUser).then(res => {\n          this.props.history.push(\"/discussion\");\n        });\n      }\n    });\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(_Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(_Col, {\n      span: 8,\n      offset: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(_Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(_Form.Item, {\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Username\\xA0\", React.createElement(_Tooltip, {\n        title: \"This will be displayed on your posts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(_Icon, {\n        type: \"question-circle-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, getFieldDecorator(\"username\", {\n      rules: [{\n        required: true,\n        message: \"Please input a username!\"\n      }]\n    })(React.createElement(_Input, {\n      name: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, getFieldDecorator(\"email\", {\n      rules: [{\n        type: \"email\",\n        message: \"The input is not valid E-mail!\"\n      }, {\n        required: true,\n        message: \"Please input a valid email address!\"\n      }]\n    })(React.createElement(_Input, {\n      name: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, getFieldDecorator(\"password\", {\n      rules: [{\n        required: true,\n        message: \"Please input your password!\"\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(_Input.Password, {\n      name: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, getFieldDecorator(\"confirm\", {\n      rules: [{\n        required: true,\n        message: \"Please confirm your password!\"\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(_Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(_Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      onClick: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Register Now\"))))));\n  }\n\n}\n\nexport default _Form.create()(Register);","map":{"version":3,"sources":["/Users/arjunwang/PlanAhead copy/client/src/component/Register.jsx"],"names":["React","Component","register","Register","constructor","handleConfirmBlur","e","value","target","setState","confirmDirty","state","compareToFirstPassword","rule","callback","form","props","getFieldValue","validateToNextPassword","validateFields","force","errors","onSubmit","bind","preventDefault","validateFieldsAndScroll","err","values","newUser","username","email","password","console","log","then","res","history","push","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","rules","required","message","type","validator","create"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,iBAAzB;;AAGA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC/BG,EAAAA,WAAW,GAAG;AACZ;;AADY,SA2BdC,iBA3Bc,GA2BMC,CAAC,IAAI;AAAA,YACfC,KADe,GACLD,CAAC,CAACE,MADG,CACfD,KADe;AAEvB,WAAKE,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAE,KAAKC,KAAL,CAAWD,YAAX,IAA2B,CAAC,CAACH;AAA7C,OAAd;AACD,KA9Ba;;AAAA,SAgCdK,sBAhCc,GAgCW,CAACC,IAAD,EAAON,KAAP,EAAcO,QAAd,KAA2B;AAAA,YAC1CC,IAD0C,GACjC,KAAKC,KAD4B,CAC1CD,IAD0C;;AAElD,UAAIR,KAAK,IAAIA,KAAK,KAAKQ,IAAI,CAACE,aAAL,CAAmB,UAAnB,CAAvB,EAAuD;AACrDH,QAAAA,QAAQ,CAAC,+CAAD,CAAR;AACD,OAFD,MAEO;AACLA,QAAAA,QAAQ;AACT;AACF,KAvCa;;AAAA,SAyCdI,sBAzCc,GAyCW,CAACL,IAAD,EAAON,KAAP,EAAcO,QAAd,KAA2B;AAAA,YAC1CC,IAD0C,GACjC,KAAKC,KAD4B,CAC1CD,IAD0C;;AAElD,UAAIR,KAAK,IAAI,KAAKI,KAAL,CAAWD,YAAxB,EAAsC;AACpCK,QAAAA,IAAI,CAACI,cAAL,CAAoB,CAAC,SAAD,CAApB,EAAiC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAjC;AACD;;AACDN,MAAAA,QAAQ;AACT,KA/Ca;;AAEZ,SAAKH,KAAL,GAAa;AACXD,MAAAA,YAAY,EAAE,KADH;AAEXW,MAAAA,MAAM,EAAE;AAFG,KAAb;AAKA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACD;;AAEDD,EAAAA,QAAQ,CAAChB,CAAD,EAAI;AACVA,IAAAA,CAAC,CAACkB,cAAF;AACA,SAAKR,KAAL,CAAWD,IAAX,CAAgBU,uBAAhB,CAAwC,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACvD,UAAI,CAACD,GAAL,EAAU;AACR,cAAME,OAAO,GAAG;AACdC,UAAAA,QAAQ,EAAEF,MAAM,CAACE,QADH;AAEdC,UAAAA,KAAK,EAAEH,MAAM,CAACG,KAFA;AAGdC,UAAAA,QAAQ,EAAEJ,MAAM,CAACI;AAHH,SAAhB;AAKAC,QAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA1B,QAAAA,QAAQ,CAAC0B,OAAD,CAAR,CAAkBM,IAAlB,CAAuBC,GAAG,IAAI;AAC5B,eAAKnB,KAAL,CAAWoB,OAAX,CAAmBC,IAAnB;AACD,SAFD;AAGD;AACF,KAZD;AAaD;;AAwBDC,EAAAA,MAAM,GAAG;AAAA,UACCC,iBADD,GACuB,KAAKvB,KAAL,CAAWD,IADlC,CACCwB,iBADD;AAEP,UAAMC,cAAc,GAAG;AACrBC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,EAAE,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADI;AAERC,QAAAA,EAAE,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFI,OADW;AAKrBE,MAAAA,UAAU,EAAE;AACVH,QAAAA,EAAE,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADM;AAEVC,QAAAA,EAAE,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFM;AALS,KAAvB;AAUA,UAAMG,kBAAkB,GAAG;AACzBD,MAAAA,UAAU,EAAE;AACVH,QAAAA,EAAE,EAAE;AACFC,UAAAA,IAAI,EAAE,EADJ;AAEFI,UAAAA,MAAM,EAAE;AAFN,SADM;AAKVH,QAAAA,EAAE,EAAE;AACFD,UAAAA,IAAI,EAAE,EADJ;AAEFI,UAAAA,MAAM,EAAE;AAFN;AALM;AADa,KAA3B;AAaA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,IAAI,EAAE,CAAX;AAAc,MAAA,MAAM,EAAE,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,6CAAUP,cAAV;AAA0B,MAAA,QAAQ,EAAE,KAAKlB,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE,0BAAM,IAAN;AACE,MAAA,KAAK,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEE;AAAS,QAAA,KAAK,EAAC,sCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,IAAI,EAAC,mBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,CAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUGiB,iBAAiB,CAAC,UAAD,EAAa;AAC7BS,MAAAA,KAAK,EAAE,CACL;AAAEC,QAAAA,QAAQ,EAAE,IAAZ;AAAkBC,QAAAA,OAAO,EAAE;AAA3B,OADK;AADsB,KAAb,CAAjB,CAIE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAVH,CADF,EAiBE,0BAAM,IAAN;AAAW,MAAA,KAAK,EAAC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGX,iBAAiB,CAAC,OAAD,EAAU;AAC1BS,MAAAA,KAAK,EAAE,CACL;AACEG,QAAAA,IAAI,EAAE,OADR;AAEED,QAAAA,OAAO,EAAE;AAFX,OADK,EAKL;AACED,QAAAA,QAAQ,EAAE,IADZ;AAEEC,QAAAA,OAAO,EAAE;AAFX,OALK;AADmB,KAAV,CAAjB,CAWE;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADH,CAjBF,EA+BE,0BAAM,IAAN;AAAW,MAAA,KAAK,EAAC,UAAjB;AAA4B,MAAA,WAAW,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGX,iBAAiB,CAAC,UAAD,EAAa;AAC7BS,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,QAAQ,EAAE,IADZ;AAEEC,QAAAA,OAAO,EAAE;AAFX,OADK,EAKL;AACEE,QAAAA,SAAS,EAAE,KAAKlC;AADlB,OALK;AADsB,KAAb,CAAjB,CAUE,2BAAO,QAAP;AAAgB,MAAA,IAAI,EAAC,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADH,CA/BF,EA4CE,0BAAM,IAAN;AAAW,MAAA,KAAK,EAAC,kBAAjB;AAAoC,MAAA,WAAW,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGqB,iBAAiB,CAAC,SAAD,EAAY;AAC5BS,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,QAAQ,EAAE,IADZ;AAEEC,QAAAA,OAAO,EAAE;AAFX,OADK,EAKL;AACEE,QAAAA,SAAS,EAAE,KAAKxC;AADlB,OALK;AADqB,KAAZ,CAAjB,CAUE,2BAAO,QAAP;AAAgB,MAAA,MAAM,EAAE,KAAKP,iBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADH,CA5CF,EAyDE,0BAAM,IAAN,oBAAeyC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE;AACE,MAAA,IAAI,EAAC,SADP;AAEE,MAAA,QAAQ,EAAC,QAFX;AAGE,MAAA,OAAO,EAAE,KAAKxB,QAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CAzDF,CADF,CADF,CAHF,CADF;AA6ED;;AAxJ8B;;AA2JjC,eAAe,MAAK+B,MAAL,GAAclD,QAAd,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { register } from \"./UserFunctions\";\nimport { Row, Col, Input, Tooltip, Form, Button, Icon } from \"antd\";\n\nclass Register extends Component {\n  constructor() {\n    super();\n    this.state = {\n      confirmDirty: false,\n      errors: {}\n    };\n\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        const newUser = {\n          username: values.username,\n          email: values.email,\n          password: values.password\n        };\n        console.log(newUser);\n        register(newUser).then(res => {\n          this.props.history.push(`/discussion`);\n        });\n      }\n    });\n  }\n\n  handleConfirmBlur = e => {\n    const { value } = e.target;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue(\"password\")) {\n      callback(\"Two passwords that you enter is inconsistent!\");\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && this.state.confirmDirty) {\n      form.validateFields([\"confirm\"], { force: true });\n    }\n    callback();\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 }\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n\n    return (\n      <div>\n        <br />\n        <br />\n        <Row>\n          <Col span={8} offset={8}>\n            <Form {...formItemLayout} onSubmit={this.onSubmit}>\n              <Form.Item\n                label={\n                  <span>\n                    Username&nbsp;\n                    <Tooltip title=\"This will be displayed on your posts\">\n                      <Icon type=\"question-circle-o\" />\n                    </Tooltip>\n                  </span>\n                }\n              >\n                {getFieldDecorator(\"username\", {\n                  rules: [\n                    { required: true, message: \"Please input a username!\" }\n                  ]\n                })(<Input name=\"username\" />)}\n              </Form.Item>\n              <Form.Item label=\"E-mail\">\n                {getFieldDecorator(\"email\", {\n                  rules: [\n                    {\n                      type: \"email\",\n                      message: \"The input is not valid E-mail!\"\n                    },\n                    {\n                      required: true,\n                      message: \"Please input a valid email address!\"\n                    }\n                  ]\n                })(<Input name=\"email\" />)}\n              </Form.Item>\n              <Form.Item label=\"Password\" hasFeedback>\n                {getFieldDecorator(\"password\", {\n                  rules: [\n                    {\n                      required: true,\n                      message: \"Please input your password!\"\n                    },\n                    {\n                      validator: this.validateToNextPassword\n                    }\n                  ]\n                })(<Input.Password name=\"password\" />)}\n              </Form.Item>\n              <Form.Item label=\"Confirm Password\" hasFeedback>\n                {getFieldDecorator(\"confirm\", {\n                  rules: [\n                    {\n                      required: true,\n                      message: \"Please confirm your password!\"\n                    },\n                    {\n                      validator: this.compareToFirstPassword\n                    }\n                  ]\n                })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n              </Form.Item>\n              <Form.Item {...tailFormItemLayout}>\n                <Button\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  onClick={this.onSubmit}\n                >\n                  Register Now\n                </Button>\n              </Form.Item>\n            </Form>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Form.create()(Register);\n"]},"metadata":{},"sourceType":"module"}