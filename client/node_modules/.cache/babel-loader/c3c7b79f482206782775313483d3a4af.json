{"ast":null,"code":"var storage = {\n  set(key, value) {\n    localStorage.setItem(key, JSON.stringify(value));\n  },\n\n  get(key) {\n    return JSON.parse(localStorage.getItem(key));\n  },\n\n  delete(key) {\n    localStorage.removeItem(key);\n  },\n\n  storeYM(year, major) {\n    let value = {\n      s1: [],\n      s3: [],\n      s5: [],\n      s7: [],\n      s9: [],\n      s11: [],\n      s13: [],\n      s15: [],\n      s1button: 0,\n      s3button: 0,\n      s5button: 0,\n      s7button: 0,\n      s9button: 0,\n      s11button: 0,\n      s13button: 0,\n      s15button: 0,\n      SideBarContainer: [],\n      SearchBarContainer: [],\n      dust: [],\n      totalmc: 0\n    };\n\n    if (!([year, major] in localStorage)) {\n      this.set([year, major], value);\n      return true;\n    }\n\n    return false;\n  },\n\n  getYM(year, major) {\n    return this.get([year, major]);\n  },\n\n  init(year, major, list) {\n    let all = this.getYM(year, major);\n    all[\"SideBarContainer\"] = list;\n    this.set([year, major], all);\n  },\n\n  getYMCol(year, major, colid) {\n    return this.getYM(year, major)[colid];\n  },\n\n  dndChange(year, major, fromid, toid, mod, color, mc) {\n    let from = this.getYM(year, major)[fromid];\n    let temp = null;\n    let index = 0;\n    let all = this.getYM(year, major);\n\n    for (let i of from) {\n      if (mod !== i[0]) {\n        index++;\n      } else {\n        temp = from[index];\n        from.splice(index, 1);\n        break;\n      }\n    }\n\n    all[fromid] = from;\n\n    if (all[\"\".concat(fromid, \"button\")] !== undefined) {\n      let frommc = all[\"\".concat(fromid, \"button\")];\n      frommc -= mc;\n      all[\"\".concat(fromid, \"button\")] = frommc;\n    }\n\n    if (toid !== \"dust\") {\n      let to = this.getYM(year, major)[toid];\n\n      if (toid === \"SearchBarContainer\") {\n        color = \"rgb(120,206,179)\";\n      } else if (toid === \"SideBarContainer\") {\n        color = \"rgb(84,169,139)\";\n      }\n\n      if (to.length === 0) {\n        to = [[temp[0], color, temp[2]]];\n      } else {\n        to.push([temp[0], color, temp[2]]);\n      }\n\n      all[toid] = to;\n\n      if (all[\"\".concat(toid, \"button\")] !== undefined) {\n        let tomc = all[\"\".concat(toid, \"button\")];\n        tomc += mc;\n        all[\"\".concat(toid, \"button\")] = tomc;\n      }\n    }\n\n    this.set([year, major], all);\n  },\n\n  dndChangeColor(year, major, id, mod, color) {\n    let newcolor = this.getYM(year, major)[id];\n    let index = 0;\n\n    for (let i of newcolor) {\n      if (mod !== i[0]) {\n        index++;\n      } else {\n        newcolor[index][1] = color;\n        break;\n      }\n    }\n\n    let all = this.getYM(year, major);\n    all[id] = newcolor;\n    this.set([year, major], all);\n  },\n\n  addNewMod(year, major, mod) {\n    let searchbar = this.getYMCol(year, major, \"SearchBarContainer\");\n\n    if (searchbar.length === 0) {\n      searchbar = [[mod, \"rgb(120,206,179)\", \"additional\"]];\n    } else {\n      searchbar.push([mod, \"rgb(120,206,179)\", \"additional\"]);\n    }\n\n    let all = this.getYM(year, major);\n    all[\"SearchBarContainer\"] = searchbar;\n    this.set([year, major], all);\n  },\n\n  deleteMod(year, major, id, mod) {\n    let bar = this.getYM(year, major)[id];\n    let index = 0;\n    let temp = null;\n\n    for (let i of bar) {\n      if (mod !== i[0]) {\n        index++;\n      } else {\n        temp = bar[index];\n        bar.splice(index, 1);\n        break;\n      }\n    }\n\n    let all = this.getYM(year, major);\n    all[id] = bar;\n\n    if (all[\"dust\"] === []) {\n      all[\"dust\"] = [temp];\n    } else {\n      all[\"dust\"].push(temp);\n    }\n\n    this.set([year, major], all);\n  },\n\n  exist(year, major, mod) {\n    let dust = this.getYMCol(year, major, \"dust\");\n    let count = 0;\n    console.log(mod);\n    console.log(dust);\n\n    for (let i of dust) {\n      if (i[0] === mod) {\n        count++;\n      }\n    }\n\n    if (count === 0) {\n      return 0;\n    }\n\n    return count;\n  },\n\n  addNewCol(year, major, id) {\n    let all = this.getYM(year, major);\n    all[id] = [];\n    all[\"\".concat(id, \"button\")] = 0;\n    this.set([year, major], all);\n  },\n\n  removeCol(year, major, id) {\n    let all = this.getYM(year, major);\n    delete all[id];\n    delete all[\"\".concat(id, \"button\")];\n    this.set([year, major], all);\n  },\n\n  changeTotalMc(year, major, mc) {\n    let m = this.getYMCol(year, major, \"totalmc\");\n    m += mc;\n    let all = this.getYM(year, major);\n    all[\"totalmc\"] = m;\n    this.set([year, major], all);\n  },\n\n  changeMc(year, major, id, mc) {\n    let m = this.getYMCol(year, major, id);\n    m += mc;\n    let all = this.getYM(year, major);\n    all[id] = m;\n    this.set([year, major], all);\n  }\n\n};\nexport default storage;","map":{"version":3,"sources":["/Users/arjunwang/PlanAhead copy/client/src/component/storage.js"],"names":["storage","set","key","value","localStorage","setItem","JSON","stringify","get","parse","getItem","delete","removeItem","storeYM","year","major","s1","s3","s5","s7","s9","s11","s13","s15","s1button","s3button","s5button","s7button","s9button","s11button","s13button","s15button","SideBarContainer","SearchBarContainer","dust","totalmc","getYM","init","list","all","getYMCol","colid","dndChange","fromid","toid","mod","color","mc","from","temp","index","i","splice","undefined","frommc","to","length","push","tomc","dndChangeColor","id","newcolor","addNewMod","searchbar","deleteMod","bar","exist","count","console","log","addNewCol","removeCol","changeTotalMc","m","changeMc"],"mappings":"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","sourcesContent":["var storage = {\r\n  set(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  },\r\n  get(key) {\r\n    return JSON.parse(localStorage.getItem(key));\r\n  },\r\n  delete(key) {\r\n    localStorage.removeItem(key);\r\n  },\r\n\r\n  storeYM(year, major) {\r\n    let value = {\r\n      s1: [],\r\n      s3: [],\r\n      s5: [],\r\n      s7: [],\r\n      s9: [],\r\n      s11: [],\r\n      s13: [],\r\n      s15: [],\r\n      s1button: 0,\r\n      s3button: 0,\r\n      s5button: 0,\r\n      s7button: 0,\r\n      s9button: 0,\r\n      s11button: 0,\r\n      s13button: 0,\r\n      s15button: 0,\r\n      SideBarContainer: [],\r\n      SearchBarContainer: [],\r\n      dust: [],\r\n      totalmc: 0\r\n    };\r\n    if (!([year, major] in localStorage)) {\r\n      this.set([year, major], value);\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n\r\n  getYM(year, major) {\r\n    return this.get([year, major]);\r\n  },\r\n\r\n  init(year, major, list) {\r\n    let all = this.getYM(year, major);\r\n    all[\"SideBarContainer\"] = list;\r\n    this.set([year, major], all);\r\n  },\r\n\r\n  getYMCol(year, major, colid) {\r\n    return this.getYM(year, major)[colid];\r\n  },\r\n\r\n  dndChange(year, major, fromid, toid, mod, color, mc) {\r\n    let from = this.getYM(year, major)[fromid];\r\n    let temp = null;\r\n    let index = 0;\r\n    let all = this.getYM(year, major);\r\n    for (let i of from) {\r\n      if (mod !== i[0]) {\r\n        index++;\r\n      } else {\r\n        temp = from[index];\r\n        from.splice(index, 1);\r\n        break;\r\n      }\r\n    }\r\n    all[fromid] = from;\r\n    if (all[`${fromid}button`] !== undefined) {\r\n      let frommc = all[`${fromid}button`];\r\n      frommc -= mc;\r\n      all[`${fromid}button`] = frommc;\r\n    }\r\n    if (toid !== \"dust\") {\r\n      let to = this.getYM(year, major)[toid];\r\n      if (toid === \"SearchBarContainer\") {\r\n        color = \"rgb(120,206,179)\";\r\n      } else if (toid === \"SideBarContainer\") {\r\n        color = \"rgb(84,169,139)\";\r\n      }\r\n      if (to.length === 0) {\r\n        to = [[temp[0], color, temp[2]]];\r\n      } else {\r\n        to.push([temp[0], color, temp[2]]);\r\n      }\r\n      all[toid] = to;\r\n      if (all[`${toid}button`] !== undefined) {\r\n        let tomc = all[`${toid}button`];\r\n        tomc += mc;\r\n        all[`${toid}button`] = tomc;\r\n      }\r\n    }\r\n    this.set([year, major], all);\r\n  },\r\n\r\n  dndChangeColor(year, major, id, mod, color) {\r\n    let newcolor = this.getYM(year, major)[id];\r\n    let index = 0;\r\n    for (let i of newcolor) {\r\n      if (mod !== i[0]) {\r\n        index++;\r\n      } else {\r\n        newcolor[index][1] = color;\r\n        break;\r\n      }\r\n    }\r\n    let all = this.getYM(year, major);\r\n    all[id] = newcolor;\r\n    this.set([year, major], all);\r\n  },\r\n\r\n  addNewMod(year, major, mod) {\r\n    let searchbar = this.getYMCol(year, major, \"SearchBarContainer\");\r\n    if (searchbar.length === 0) {\r\n      searchbar = [[mod, \"rgb(120,206,179)\", \"additional\"]];\r\n    } else {\r\n      searchbar.push([mod, \"rgb(120,206,179)\", \"additional\"]);\r\n    }\r\n    let all = this.getYM(year, major);\r\n    all[\"SearchBarContainer\"] = searchbar;\r\n    this.set([year, major], all);\r\n  },\r\n\r\n  deleteMod(year, major, id, mod) {\r\n    let bar = this.getYM(year, major)[id];\r\n    let index = 0;\r\n    let temp = null;\r\n    for (let i of bar) {\r\n      if (mod !== i[0]) {\r\n        index++;\r\n      } else {\r\n        temp = bar[index];\r\n        bar.splice(index, 1);\r\n        break;\r\n      }\r\n    }\r\n    let all = this.getYM(year, major);\r\n    all[id] = bar;\r\n    if (all[\"dust\"] === []) {\r\n      all[\"dust\"] = [temp];\r\n    } else {\r\n      all[\"dust\"].push(temp);\r\n    }\r\n    this.set([year, major], all);\r\n  },\r\n\r\n  exist(year, major, mod){\r\n    let dust=this.getYMCol(year, major, \"dust\");\r\n    let count = 0;\r\n    console.log(mod);\r\n    console.log(dust);\r\n    for (let i of dust){\r\n      if (i[0]===mod){count++}\r\n    }\r\n    if (count===0){return 0}\r\n    return count\r\n  },\r\n\r\n  addNewCol(year, major, id) {\r\n    let all = this.getYM(year, major);\r\n    all[id] = [];\r\n    all[`${id}button`] = 0;\r\n    this.set([year, major], all);\r\n  },\r\n\r\n  removeCol(year, major, id) {\r\n    let all = this.getYM(year, major);\r\n    delete all[id];\r\n    delete all[`${id}button`];\r\n    this.set([year, major], all);\r\n  },\r\n\r\n  changeTotalMc(year, major, mc) {\r\n    let m = this.getYMCol(year, major, \"totalmc\");\r\n    m += mc;\r\n    let all = this.getYM(year, major);\r\n    all[\"totalmc\"] = m;\r\n    this.set([year, major], all);\r\n  },\r\n\r\n  changeMc(year, major, id, mc) {\r\n    let m = this.getYMCol(year, major, id);\r\n    m += mc;\r\n    let all = this.getYM(year, major);\r\n    all[id] = m;\r\n    this.set([year, major], all);\r\n  }\r\n};\r\nexport default storage;\r\n"]},"metadata":{},"sourceType":"module"}